// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	config "github.com/fernandogiovanini/backhome/internal/config"
	mock "github.com/stretchr/testify/mock"
)

// ConfigStorage is an autogenerated mock type for the ConfigStorage type
type ConfigStorage struct {
	mock.Mock
}

// AddFile provides a mock function with given fields: filename
func (_m *ConfigStorage) AddFile(filename string) error {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for AddFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateConfigFile provides a mock function with no fields
func (_m *ConfigStorage) CreateConfigFile() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfig provides a mock function with no fields
func (_m *ConfigStorage) GetConfig() *config.ConfigData {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *config.ConfigData
	if rf, ok := ret.Get(0).(func() *config.ConfigData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ConfigData)
		}
	}

	return r0
}

// MakeLocalRepository provides a mock function with no fields
func (_m *ConfigStorage) MakeLocalRepository() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeLocalRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with no fields
func (_m *ConfigStorage) Save() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConfigStorage creates a new instance of ConfigStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigStorage {
	mock := &ConfigStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
