// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ConfigI is an autogenerated mock type for the ConfigI type
type ConfigI struct {
	mock.Mock
}

// AddFile provides a mock function with given fields: filename
func (_m *ConfigI) AddFile(filename string) error {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for AddFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateConfigFile provides a mock function with no fields
func (_m *ConfigI) CreateConfigFile() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfigFilePath provides a mock function with no fields
func (_m *ConfigI) GetConfigFilePath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfigFilePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetFilenames provides a mock function with no fields
func (_m *ConfigI) GetFilenames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFilenames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetLocalPath provides a mock function with no fields
func (_m *ConfigI) GetLocalPath() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLocalPath")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemote provides a mock function with no fields
func (_m *ConfigI) GetRemote() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRemote")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MakeLocalRepository provides a mock function with no fields
func (_m *ConfigI) MakeLocalRepository() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeLocalRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with no fields
func (_m *ConfigI) Save() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConfigI creates a new instance of ConfigI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigI(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigI {
	mock := &ConfigI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
