// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	backhome "github.com/fernandogiovanini/backhome/internal/backhome"
	mock "github.com/stretchr/testify/mock"
)

// FileOperations is an autogenerated mock type for the FileOperations type
type FileOperations struct {
	mock.Mock
}

// CopyTo provides a mock function with given fields: local
func (_m *FileOperations) CopyTo(local *backhome.Local) error {
	ret := _m.Called(local)

	if len(ret) == 0 {
		panic("no return value specified for CopyTo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*backhome.Local) error); ok {
		r0 = rf(local)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDestination provides a mock function with given fields: local
func (_m *FileOperations) NewDestination(local *backhome.Local) (*backhome.Destination, error) {
	ret := _m.Called(local)

	if len(ret) == 0 {
		panic("no return value specified for NewDestination")
	}

	var r0 *backhome.Destination
	var r1 error
	if rf, ok := ret.Get(0).(func(*backhome.Local) (*backhome.Destination, error)); ok {
		return rf(local)
	}
	if rf, ok := ret.Get(0).(func(*backhome.Local) *backhome.Destination); ok {
		r0 = rf(local)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backhome.Destination)
		}
	}

	if rf, ok := ret.Get(1).(func(*backhome.Local) error); ok {
		r1 = rf(local)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Path provides a mock function with no fields
func (_m *FileOperations) Path() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewFileOperations creates a new instance of FileOperations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileOperations(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileOperations {
	mock := &FileOperations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
